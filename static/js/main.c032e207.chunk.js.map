{"version":3,"sources":["img/loading.gif","components/NavBar.js","components/Modal.js","components/Pagination.js","components/Main.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","className","Modal","id","tabIndex","role","aria-labelledby","aria-hidden","src","loadingSpinner","alt","Component","Pagination","wordsPerPage","totalWords","paginate","currentPage","pageNumbers","i","Math","ceil","push","map","number","key","classNames","onClick","Main","state","text","numOfWords","repeatedWords","isAnalyzing","searchText","handleChange","e","setState","target","value","handleClick","trim","split","length","counts","forEach","x","setTimeout","document","getElementById","click","resetState","pageNumber","this","indexOfLastWord","indexOfFirstWord","currentWords","Object","keys","rows","onChange","required","placeholder","type","disabled","data-toggle","data-target","style","backgroundColor","cursor","color","scope","filter","includes","slice","index","window","location","href","Footer","year","Date","getFullYear","App","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c032e207.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.bf4c97ed.gif\";","import React from 'react'\r\n\r\n function NavBar() {\r\n    return (\r\n        <nav className=\"navbar\">\r\n          <p className=\"navbar-brand mx-auto my-auto\">\r\n            Text Analyzer <i className=\"fas fa-file-alt fa-spin\"></i>\r\n          </p>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default NavBar;","import React, { Component } from \"react\";\r\nimport loadingSpinner from \"../img/loading.gif\";\r\n\r\nexport default class Modal extends Component {\r\n        \r\n  render() {\r\n    \r\n    return (\r\n      <div>\r\n        <div\r\n          className=\"modal fade \"\r\n          id=\"exampleModalCenter\"\r\n          tabIndex=\"-1\"\r\n          role=\"dialog\"\r\n          aria-labelledby=\"exampleModalCenterTitle\"\r\n          aria-hidden=\"true\"\r\n        >\r\n          <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n            <div className=\"modal-content\">\r\n              <div className=\"modal-body text-center\">\r\n                <h4 className=\"my-3\"> Processing Text...</h4>\r\n                <img src={loadingSpinner} alt=\"spinner\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nexport default function Pagination({wordsPerPage, totalWords, paginate, currentPage}) {\r\n    const pageNumbers = [];\r\n\r\n    for(let i=1; i <= Math.ceil(totalWords/wordsPerPage);i++){\r\n        pageNumbers.push(i)\r\n    }\r\n    return (\r\n        <nav>\r\n          <ul className=\"pagination\">\r\n            {pageNumbers.map(number =>(\r\n                <li key={number} className={classNames(\"page-item\",{\r\n                    \"active\": number === currentPage\r\n                })}>\r\n                  <button onClick={()=> paginate(number)} className=\"page-link\">\r\n                   {number}\r\n                  </button>\r\n                </li>\r\n            ))\r\n\r\n            }\r\n          </ul>\r\n        </nav>\r\n    )\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Modal from \"./Modal\";\r\nimport Pagination from './Pagination';\r\n\r\nclass Main extends Component {\r\n  state = {\r\n    text: \"\",\r\n    numOfWords: 0,\r\n    repeatedWords: {},\r\n    isAnalyzing: false,\r\n    searchText:\"\",\r\n    currentPage: 1,\r\n    wordsPerPage: 15\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({ text: e.target.value });\r\n  };\r\n  handleClick = () => {\r\n    this.setState({isAnalyzing: true})\r\n    const { text } = this.state;\r\n    const numOfWords = text.trim().split(/\\s+/).length;\r\n    let counts = {};\r\n    text\r\n      .trim()\r\n      .split(/\\s+/)\r\n      .forEach(function (x) {\r\n        counts[x] = (counts[x] || 0) + 1;\r\n      });\r\n    setTimeout(()=>{\r\n      if(this.state.isAnalyzing){\r\n        const btn = document.getElementById('analyze');\r\n        btn.click();\r\n      }\r\n      this.setState({\r\n        repeatedWords: counts,\r\n        numOfWords,\r\n        isAnalyzing:false\r\n      })\r\n    },1000)\r\n  };\r\n  resetState = () => {\r\n    this.setState({\r\n      text: \"\",\r\n      numOfWords: 0,\r\n      repeatedWords: {},\r\n      pageNumber:1\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { text, numOfWords, repeatedWords, searchText, currentPage, wordsPerPage } = this.state;\r\n    const indexOfLastWord = currentPage * wordsPerPage;\r\n    const indexOfFirstWord = indexOfLastWord - wordsPerPage;\r\n    const currentWords = Object.keys(repeatedWords);\r\n    const paginate = pageNumber =>  {\r\n      window.location.href=\"#\";\r\n      this.setState({currentPage: pageNumber})\r\n    }\r\n\r\n    return (\r\n      <div className=\"container-fluid py-5\">\r\n        <Modal />\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6 text-center\">\r\n            <form>\r\n              <div className=\"form-group\">\r\n                <textarea\r\n                  id=\"textarea\"\r\n                  className=\"form-control\"\r\n                  rows=\"14\"\r\n                  value={text}\r\n                  onChange={this.handleChange}\r\n                  required=\"required\"\r\n                  placeholder=\"Enter text here....\"\r\n                ></textarea>\r\n              </div>\r\n              <br />\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-primary\"\r\n                disabled={text === \"\" ? true : false}\r\n                id=\"analyze\"\r\n                onClick={this.handleClick}\r\n                data-toggle=\"modal\"\r\n                data-target=\"#exampleModalCenter\"\r\n                style={{backgroundColor:\"#2F2FA2\"}}\r\n              >\r\n                Analyze Text\r\n              </button>\r\n              <button\r\n                type=\"reset\"\r\n                className=\"btn btn-danger mx-2\"\r\n                id=\"reset\"\r\n                onClick={this.resetState}\r\n              >\r\n                Reset\r\n              </button>\r\n            </form>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <div className=\"row\">\r\n              <div className=\"col info\">\r\n                Total Words: {text === \"\" ? 0 : numOfWords}\r\n              </div>\r\n              <div className=\"col input-group py-2\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"Search word...\"\r\n                  value={searchText}\r\n                  onChange={e => this.setState({\r\n                    searchText: e.target.value,\r\n                    currentPage: 1\r\n                  })}\r\n                />\r\n                <div className=\"input-group-append\">\r\n                  <span className=\"input-group-text\"\r\n                  onClick={()=>this.setState({searchText: \"\"})}\r\n                  style={{cursor:'pointer', color:'red'}}> X </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <table className=\"table table-striped table-light table-bordered\">\r\n              <thead>\r\n                <tr>\r\n                  <th scope=\"col-md-1\">#</th>\r\n                  <th scope=\"col-md-4\">Word:</th>\r\n                  <th scope=\"col-md-7\">Frequency:</th>\r\n                </tr>\r\n              </thead>\r\n              {text ? (\r\n                <tbody>\r\n                  {Object.keys(repeatedWords)\r\n                  .filter( key => key.includes(searchText))\r\n                  .slice(indexOfFirstWord, indexOfLastWord)\r\n                  .map((value,index) => {\r\n                    return (\r\n                      <tr key={index}>\r\n                        <th scope=\"row\">{index+1}</th>\r\n                        <td>{value}</td>\r\n                        <td>{repeatedWords[value]}</td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              ) : null}\r\n            </table>\r\n            <Pagination wordsPerPage={wordsPerPage} \r\n                        totalWords={currentWords.length} \r\n                        paginate={paginate}\r\n                        currentPage={currentPage}/>\r\n          </div>\r\n          <div>\r\n         </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react'\r\n\r\nexport default function Footer() {\r\n    let year = new Date().getFullYear();\r\n    return (\r\n        <div className=\"bg-secondary text-white py-1\">\r\n           <div className=\"text-center\">\r\n                <p className=\"pt-4 ml-auto\">{year} &copy; Flamur Deliu</p>\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport NavBar from './components/NavBar';\nimport Main from './components/Main';\nimport Footer from './components/Footer';\n\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <NavBar />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}